// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  phone       String?
  role        UserRole
  password    String
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  managedEvents     Event[]     @relation("EventManager")
  assignedTasks     Task[]      @relation("TaskAssignee")
  clientEvents      Event[]     @relation("EventClient")
  notifications     Notification[]
  aiCommands        AICommand[]
  
  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  events      Event[]
  
  @@map("companies")
}

model Event {
  id              String      @id @default(cuid())
  name            String
  type            EventType
  date            DateTime
  venue           String
  guestCount      Int
  budget          Float?
  status          EventStatus
  description     String?
  templateId      String?
  template        Template?   @relation(fields: [templateId], references: [id])
  managerId       String
  manager         User        @relation("EventManager", fields: [managerId], references: [id])
  clientId        String
  client          User        @relation("EventClient", fields: [clientId], references: [id])
  companyId       String?
  company         Company?    @relation(fields: [companyId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  modules         Module[]
  notifications   Notification[]
  invoices        Invoice[]
  
  @@map("events")
}

model Template {
  id              String   @id @default(cuid())
  name            String
  description     String?
  eventType       EventType
  region          String?
  isCustom        Boolean  @default(false)
  parentTemplateId String?
  parentTemplate  Template? @relation("TemplateClone", fields: [parentTemplateId], references: [id])
  clonedTemplates Template[] @relation("TemplateClone")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  defaultModules  ModuleTemplate[]
  events          Event[]
  
  @@map("templates")
}

model ModuleTemplate {
  id          String         @id @default(cuid())
  name        String
  category    ModuleCategory
  priority    Int
  required    Boolean        @default(false)
  templateId  String
  template    Template       @relation(fields: [templateId], references: [id])
  createdAt   DateTime       @default(now())
  
  @@map("module_templates")
}

model Module {
  id          String       @id @default(cuid())
  name        String
  category    ModuleCategory
  priority    Int
  required    Boolean      @default(false)
  status      ModuleStatus
  budget      Float?
  actualCost  Float        @default(0)
  eventId     String
  event       Event        @relation(fields: [eventId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  tasks       Task[]
  approvals   ModuleApproval[]
  
  @@map("modules")
}

model ModuleApproval {
  id          String           @id @default(cuid())
  status      ApprovalStatus
  comments    String?
  moduleId    String
  module      Module           @relation(fields: [moduleId], references: [id])
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime         @default(now())
  
  @@map("module_approvals")
}

model Task {
  id              String     @id @default(cuid())
  name            String
  description     String?
  status          TaskStatus
  priority        TaskPriority
  estimatedHours  Float
  actualHours     Float      @default(0)
  estimatedCost   Float?
  actualCost      Float      @default(0)
  dueDate         DateTime?
  completedAt     DateTime?
  moduleId        String
  module          Module     @relation(fields: [moduleId], references: [id])
  assignedToId    String?
  assignedTo      User?      @relation("TaskAssignee", fields: [assignedToId], references: [id])
  parentTaskId    String?
  parentTask      Task?      @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks        Task[]     @relation("TaskHierarchy")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relations
  dependencies    TaskDependency[] @relation("DependentTask")
  dependents      TaskDependency[] @relation("DependsOnTask")
  materials       TaskMaterial[]
  notifications   Notification[]
  
  @@map("tasks")
}

model TaskDependency {
  id              String @id @default(cuid())
  dependentTaskId String
  dependentTask   Task   @relation("DependentTask", fields: [dependentTaskId], references: [id])
  dependsOnTaskId String
  dependsOnTask   Task   @relation("DependsOnTask", fields: [dependsOnTaskId], references: [id])
  
  @@unique([dependentTaskId, dependsOnTaskId])
  @@map("task_dependencies")
}

model InventoryItem {
  id              String         @id @default(cuid())
  name            String
  description     String?
  category        String
  unit            String
  quantityInStock Float
  reorderLevel    Float
  unitCost        Float
  supplier        String?
  supplierContact String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  taskMaterials   TaskMaterial[]
  
  @@map("inventory_items")
}

model TaskMaterial {
  id              String        @id @default(cuid())
  quantity        Float
  estimatedCost   Float
  actualCost      Float         @default(0)
  taskId          String
  task            Task          @relation(fields: [taskId], references: [id])
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  
  @@map("task_materials")
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  channel     NotificationChannel
  status      NotificationStatus
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  eventId     String?
  event       Event?           @relation(fields: [eventId], references: [id])
  taskId      String?
  task        Task?            @relation(fields: [taskId], references: [id])
  scheduledAt DateTime?
  sentAt      DateTime?
  readAt      DateTime?
  createdAt   DateTime         @default(now())
  
  @@map("notifications")
}

model EmailTemplate {
  id              String   @id @default(cuid())
  name            String
  subject         String
  body            String
  variables       Json?
  category        String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("email_templates")
}

model AICommand {
  id          String   @id @default(cuid())
  prompt      String
  response    String?
  type        String
  status      String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  metadata    Json?
  createdAt   DateTime @default(now())
  
  @@map("ai_commands")
}

model Invoice {
  id          String        @id @default(cuid())
  invoiceNumber String      @unique
  amount      Float
  tax         Float         @default(0)
  totalAmount Float
  status      InvoiceStatus
  dueDate     DateTime
  paidAt      DateTime?
  eventId     String
  event       Event         @relation(fields: [eventId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@map("invoices")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  VENDOR
  CLIENT
}

enum EventType {
  WEDDING
  BIRTHDAY
  CORPORATE
  ANNIVERSARY
  CUSTOM
}

enum EventStatus {
  PLANNING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ModuleCategory {
  VENUE
  FOOD
  DECORATION
  LIGHTING
  PHOTOGRAPHY
  TRANSPORTATION
  COMMUNICATIONS
  GIFTS
  SECURITY
  ENTERTAINMENT
}

enum ModuleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  DEADLINE_REMINDER
  STATUS_UPDATE
  APPROVAL_REQUEST
  PAYMENT_REMINDER
  GENERAL
}

enum NotificationChannel {
  EMAIL
  SMS
  IN_APP
  WHATSAPP
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}
